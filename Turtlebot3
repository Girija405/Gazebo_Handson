export TURTLEBOT3_MODEL=burger
roslaunch turtlebot3_gazebo turtlebot3_world.launch
roslaunch turtlebot3_bringup turtlebot3_robot.launch


export TURTLEBOT3_MODEL=burger
roslaunch turtlebot3_slam turtlebot3_slam.launch slam_methods:=gmapping
rosnode list
in rviz add tf



export TURTLEBOT3_MODEL=burger
roslaunch turtlebot3_teleop turtlebot3_teleop_key.launch

rosrun map_server map_saver -f ~/map

user@hostname$ roscd mapping/maps
user@hostname$ rosrun map_server map_server willow.yaml
Now, in another terminal, start up an instance of rviz:

user@hostname$ rosrun rviz rviz
Add a display of type Map, and set the topic name to /map. Make sure that the fixed frame is also set to /map. 


 Two wheeled robot:
--------------------
catkin_create_pkg m2wr_description urdf
cd m2wr_description
mkdir urdf
cd urdf
gedit m2wr.xacro

==============================
simulation_ws/src
cd src
catkin_create_pkg m2wr_description urdf
cd m2wr_description 
mkdir urdf
cd urdf
gedit m2wr.xacro
------------------
<?xml version="1.0" ?>
<robot name="m2wr" xmlns:xacro="http://www.ros.org/wiki/xacro">
  <material name="black">
    <color rgba="0.0 0.0 0.0 1.0"/>
  </material>
  <material name="blue">
    <color rgba="0.203125 0.23828125 0.28515625 1.0"/>
  </material>
  <material name="green">
    <color rgba="0.0 0.8 0.0 1.0"/>
  </material>
  <material name="grey">
    <color rgba="0.2 0.2 0.2 1.0"/>
  </material>
  <material name="orange">
    <color rgba="1.0 0.423529411765 0.0392156862745 1.0"/>
  </material>
  <material name="brown">
    <color rgba="0.870588235294 0.811764705882 0.764705882353 1.0"/>
  </material>
  <material name="red">
    <color rgba="0.80078125 0.12890625 0.1328125 1.0"/>
  </material>
  <material name="white">
    <color rgba="1.0 1.0 1.0 1.0"/>
  </material>
  
  <gazebo reference="link_chassis">
    <material>Gazebo/Orange</material>
  </gazebo>
  <gazebo reference="link_left_wheel">
    <material>Gazebo/Blue</material>
  </gazebo>
  <gazebo reference="link_right_wheel">
    <material>Gazebo/Blue</material>
  </gazebo>
  
  <gazebo>
    <plugin filename="libgazebo_ros_diff_drive.so" name="differential_drive_controller">
      <legacyMode>false</legacyMode>
      <alwaysOn>true</alwaysOn>
      <updateRate>20</updateRate>
      <leftJoint>joint_left_wheel</leftJoint>
      <rightJoint>joint_right_wheel</rightJoint>
      <wheelSeparation>0.2</wheelSeparation>
      <wheelDiameter>0.2</wheelDiameter>
      <torque>0.1</torque>
      <commandTopic>cmd_vel</commandTopic>
      <odometryTopic>odom</odometryTopic>
      <odometryFrame>odom</odometryFrame>
      <robotBaseFrame>link_chassis</robotBaseFrame>
    </plugin>
  </gazebo>
  
  <link name="link_chassis">
    <!-- pose and inertial -->
    <pose>0 0 0.1 0 0 0</pose>
    <inertial>
      <mass value="5"/>
      <origin rpy="0 0 0" xyz="0 0 0.1"/>
      <inertia ixx="0.0395416666667" ixy="0" ixz="0" iyy="0.106208333333" iyz="0" izz="0.106208333333"/>
    </inertial>
    <!-- body -->
    <collision name="collision_chassis">
      <geometry>
        <box size="0.5 0.3 0.07"/>
      </geometry>
    </collision>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.5 0.3 0.07"/>
      </geometry>
      <material name="blue"/>
    </visual>
    <!-- caster front -->
    <collision name="caster_front_collision">
      <origin rpy=" 0 0 0" xyz="0.35 0 -0.05"/>
      <geometry>
        <sphere radius="0.05"/>
      </geometry>
      <surface>
        <friction>
          <ode>
            <mu>0</mu>
            <mu2>0</mu2>
            <slip1>1.0</slip1>
            <slip2>1.0</slip2>
          </ode>
        </friction>
      </surface>
    </collision>
    <visual name="caster_front_visual">
      <origin rpy=" 0 0 0" xyz="0.2 0 -0.05"/>
      <geometry>
        <sphere radius="0.05"/>
      </geometry>
    </visual>
  </link>
  
  <link name="link_right_wheel">
    <inertial>
      <mass value="0.2"/>
      <origin rpy="0 1.5707 1.5707" xyz="0 0 0"/>
      <inertia ixx="0.000526666666667" ixy="0" ixz="0" iyy="0.000526666666667" iyz="0" izz="0.001"/>
    </inertial>
    <collision name="link_right_wheel_collision">
      <origin rpy="0 1.5707 1.5707" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.04" radius="0.1"/>
      </geometry>
    </collision>
    <visual name="link_right_wheel_visual">
      <origin rpy="0 1.5707 1.5707" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.04" radius="0.1"/>
      </geometry>
    </visual>
  </link>
  
  <joint name="joint_right_wheel" type="continuous">
    <origin rpy="0 0 0" xyz="-0.05 0.15 0"/>
    <child link="link_right_wheel"/>
    <parent link="link_chassis"/>
    <axis rpy="0 0 0" xyz="0 1 0"/>
    <limit effort="10000" velocity="1000"/>
    <joint_properties damping="1.0" friction="1.0"/>
  </joint>
  
  <link name="link_left_wheel">
    <inertial>
      <mass value="0.2"/>
      <origin rpy="0 1.5707 1.5707" xyz="0 0 0"/>
      <inertia ixx="0.000526666666667" ixy="0" ixz="0" iyy="0.000526666666667" iyz="0" izz="0.001"/>
    </inertial>
    <collision name="link_left_wheel_collision">
      <origin rpy="0 1.5707 1.5707" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.04" radius="0.1"/>
      </geometry>
    </collision>
    <visual name="link_left_wheel_visual">
      <origin rpy="0 1.5707 1.5707" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.04" radius="0.1"/>
      </geometry>
    </visual>
  </link>
  
  <joint name="joint_left_wheel" type="continuous">
    <origin rpy="0 0 0" xyz="-0.05 -0.15 0"/>
    <child link="link_left_wheel"/>
    <parent link="link_chassis"/>
    <axis rpy="0 0 0" xyz="0 1 0"/>
    <limit effort="10000" velocity="1000"/>
    <joint_properties damping="1.0" friction="1.0"/>
  </joint>
</robot>



--------------------------------------------------------------

cd m2wr_description
mkdir launch
cd launch
gedit rviz.launch
--------------------
<?xml version="1.0"?>
<launch>

  <param name="robot_description" command="cat '$(find m2wr_description)/urdf/m2wr.xacro'"/>

  <!-- send fake joint values -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="use_gui" value="False"/>
  </node>

  <!-- Combine joint values -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher"/>

  <!-- Show in Rviz   -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find m2wr_description)/urdf/m2wr.rviz" />

</launch>
----------------------------------------------------------------

cd simulation_ws
catkin_make
source devel/setup.bash
roslaunch m2wr_description rviz.launch
-----------------In rviz panel
add->select 'robot state'

cd launch
gedit spawn.launch
-----------------------
<?xml version="1.0" encoding="UTF-8"?>
<launch>
   
    <param name="robot_description" command="cat '$(find m2wr_description)/urdf/m2wr.xacro'" />

    <arg name="x" default="0"/>
    <arg name="y" default="0"/>
    <arg name="z" default="0.5"/>

    <node name="m2wr_spawn" pkg="gazebo_ros" type="spawn_model" output="screen"
          args="-urdf -param robot_description -model m2wr -x $(arg x) -y $(arg y) -z $(arg z)" />

    

</launch>

----------------------------------------------------------------
launch gazebo window
roslaunch m2wr_description spawn.launch
rosrun teleop_twist_keyboard teleop_twist_keyboard.py

=============================================================================================
Virtual model of an omni wheel robot
-----------------------------------
rostopic pub geometry_msgs/Twist '[0.0,0.0,0.0] '[0.0,0.0,0.0]'

===============================================================================================
Gazebo Tutorial
-------------
catkin_create_pkg my_simulations
cd my_simulations
mkdir launch
mkdir world
cd launch
gedit my_world.launch
---------------------
<?xml version="1.0" encoding='UTF-8'?>
<launch>
<arg name='debug' default='false'/>
<arg name='gui' default='false'/>
<arg name='pause' default='true'/>	
<arg name='world' default='$(find my_simulations)/world/empty_world.world'/>
<!--include gazebo-ros launcher-->
<include file="$(find gazebo_ros)/launch/empty_world.launch">
<arg name='world_name' value="$(arg world)"/>
<arg name='debug' value="$(arg debug)"/>

<arg name='gui' value="$(arg gui)"/>
<arg name='paused' value="$(arg pause)"/>
<arg name='use_sim_time' value="true"/>
</include>

</launch>
------------------------
cd world 
gedit empty_world.world
-------------------------
<?xml version="1.0"?>
<sdf version="1.5">
<world name="default">
<!--A global light source-->
<include>
<uri>model://sun</uri>
</include>
<!--A ground plane-->
<include>
<uri>model://ground_plane</uri>
</include>
</world>


</sdf>

----------------------
roslaunch my_simulations my_world.launch
===============================
How to add gazebo models to a simulation
-----------------------------------------
gedit empty_world.world
-------------------------
<?xml version="1.0"?>
<sdf version="1.5">
<world name="default">
<!--A global light source-->
<include>
<uri>model://sun</uri>
</include>
<!--A ground plane-->
<include>
<uri>model://ground_plane</uri>
</include>
<include>
<uri>model://postbox</uri>
<static>true</static>
<pose>5 7 2 0 0 0</pose>
</include>
<uri>model://kitchen_chair</uri>
<static>false</static>
<pose>0 0 1 0 0 0</pose>
</include>
</world>


</sdf>
=============================================
How to spawn a robot in gazebo
==================================
cd simulation_ws

cd src
git clone git clone https://bitbucket.org/theconstructcore/two-wheeled-robot-simulation.git
cd two-wheeled-robot-simulation
cd simulation_ws
catkin_make
source devel/setup.bash
roslaunch m2wr_description spawn.launch
rostopic list
=============================================
How to create a gazebo model using sdf
==========================================
cd simulation_ws
mkdir models
cd models
mkdir my1stmodel 
cd my1stmodel
gedit model.config
gedit model.sdf

model.config
--------------
<?xml version="1.0"?>
<model>
<name>My ist model</name>
<version>1.0</version>
<sdf version="1.5">model.sdf</sdf>
<author>
<name>Expert</name>
<email>me@mail.com</email>
</author>
<description>
My first model for gazebo
</description>
</model>


------------
model.sdf
---------------
<?xml version="1.0"?>
<sdf version="1.5">
<model name="myfirstmodel">
<static>false</static>
<link name="link">
<collision name="collision">
<geometry>
<box>
<size>3 2 5</size>
</box>
</geometry>
<surface>
<friction>
<ode>
<mu>100</mu>
<mu2>50</mu2>
</ode>
</friction>
</surface>
</collision>
<visual name="visual">
<geometry>
<box>
<size>3 2 5</size>
</box>
</geometry>
<script>
<uri>file://media/materials/scripts/gazebo.material</uri>
<name>Gazebo/Grey</name>
</script>
</visual>
</link>
</model>
</sdf>






-------------------
empty_world.world
--------------------
<?xml version="1.0"?>
<sdf version="1.5">
<world name="default">
<include>
<uri>model://sun</uri>
</include>

<include>
<uri>model://ground_plane</uri>
</include>

<include>
<uri>model://my1stmodel</uri>
<static>true</static>
<pose>0 0 5 0 0 0</pose>
</include>


</world>
</sdf>
----------------------------------
roslaunch my_simulations my_world.launch
----------------------------------------
How to use a mesh file to create a gazebo model
==========================================
cd my1stmodel
mkdir meshes
cd meshes
gedit something.stl
--------------------
model.sdf
---------------
<?xml version="1.0"?>
<sdf version="1.5">
<model name="myfirstmodel">
<static>false</static>
<link name="link">
<collision name="collision">
<geometry>
<box>
<size>3 2 5</size>
</box>
</geometry>
<surface>
<friction>
<ode>
<mu>100</mu>
<mu2>50</mu2>
</ode>
</friction>
</surface>
</collision>
<visual name="visual">
<geometry>
<mesh>
<uri>model://my1stmodel/meshes/something.stl</uri>

<scale>0.01 0.01 0.01</scale>
</mesh>
</geometry>
<script>
<uri>file://media/materials/scripts/gazebo.material</uri>
<name>Gazebo/Grey</name>
</script>
</visual>
</link>
</model>
</sdf>


--------------------

roslaunch my_simulations my_world.launch
---change the scale in mesh file

--------------------
model.sdf
---------------
<?xml version="1.0"?>
<sdf version="1.5">
<model name="myfirstmodel">
<static>false</static>
<link name="link">
<collision name="collision">
<geometry>
<box>
<size>3 2 5</size>
</box>
</geometry>
<surface>
<friction>
<ode>
<mu>100</mu>
<mu2>50</mu2>
</ode>
</friction>
</surface>
</collision>
<visual name="visual">
<geometry>
<mesh>
<uri>model://my1stmodel/meshes/something.stl</uri>

<scale>0.001 0.001 0.001</scale>
</mesh>
</geometry>
<script>
<uri>file://media/materials/scripts/gazebo.material</uri>
<name>Gazebo/Grey</name>
</script>
</visual>
</link>
</model>
</sdf>

--------------------------

roslaunch my_simulations my_world.launch
--------------------------------------
change the collision part now
-----------------------------

--------------------
model.sdf
---------------
<?xml version="1.0"?>
<sdf version="1.5">
<model name="myfirstmodel">
<static>false</static>
<link name="link">
<collision name="collision">
<geometry>
<mesh>
<uri>model://my1stmodel/meshes/something.stl</uri>

<scale>0.001 0.001 0.001</scale>
</mesh>
</geometry>
<surface>
<friction>
<ode>
<mu>100</mu>
<mu2>50</mu2>
</ode>
</friction>
</surface>
</collision>
<visual name="visual">
<geometry>
<mesh>
<uri>model://my1stmodel/meshes/something.stl</uri>

<scale>0.001 0.001 0.001</scale>
</mesh>
</geometry>
<script>
<uri>file://media/materials/scripts/gazebo.material</uri>
<name>Gazebo/Grey</name>
</script>
</visual>
</link>
</model>
</sdf>

--------------------------
roslaunch my_simulations my_world.launch
-----------------------------
How to use an image file as texture for gazebo model
===================================================
empty_world.world
---------------------
<?xml version="1.0"?>
<sdf version="1.5">
<world name="default">
<!--A global light source-->
<include>
<uri>model://sun</uri>
</include>
<!--A ground plane-->
<include>
<uri>model://ground_plane</uri>
</include>
</world>
<include>
<uri>model://lc_sofa</uri>
<pose>1 1 1 0 0 0</pose>
</include>
</world>

</sdf>
----------------
roslaunch my_simulations my_world.launch
--------------------------------------
cd my_simulations
cd models
mkdir lc_sofa
mkdir meshes
mkdir materials
cd materials
mkdir textures
mkdir scripts
cd scripts
gedit sofa.material
cd textures
sofa1.png
sofa.png
cd lc_sofa
gedit lc_sofa.sdf
gedit model.config

lc_sofa.sdf
-------------------
<?xml version="1.0"?>
<sdf version="1.5">
<model name="lc_sofa">
<static>false</static>
<link name="sofa_link">
<collision name="sofa_collision">
<geometry>
<box>
<size>1.70 0.51 0.55</size>
</box>
</geometry>
</collision>
<visual name="sofa_mesh">
<cast_shadows>true</cast_shadows>
<geometry>
<mesh>
<uri>model://lc_sofa/meshes/sofa.dae</uri>
</mesh>
</geometry>
<material>
<script>
<uri>file://media/materials/scripts/gazebo.material</uri>
<name>Gazebo/Blue</name>
</script>
</material>
</visual>
</link>
</model>

</sdf>
------------------
gedit sofa.material
--------------------
material sofaMat/Diffuse
{
receive_shadows off
technique
{
pass{
texture_unit{
texture sofa1.png
}
}
}
}
===============
lc_sofa.sdf
-------------------
<?xml version="1.0"?>
<sdf version="1.5">
<model name="lc_sofa">
<static>false</static>
<link name="sofa_link">
<collision name="sofa_collision">
<geometry>
<box>
<size>1.70 0.51 0.55</size>
</box>
</geometry>
</collision>
<visual name="sofa_mesh">
<cast_shadows>true</cast_shadows>
<geometry>
<mesh>
<uri>model://lc_sofa/meshes/sofa.dae</uri>
</mesh>
</geometry>
<material>
<script>

<uri>model://lc_sofa/materials/scripts</uri>
<uri>model://lc_sofa/materials/textures</uri>
<name>sofaMat/Diffuse</name>
</script>
</material>
</visual>
</link>
</model>

</sdf>
------------------ 

roslaunch my_simulations my_world.launch
--------------------------------------
How to create a robot using URDF -part1
=====================================
cd simulation_ws
cd src
catkin_create_pkg my_robot_description
cd my_robot_description
mkdir urdf
mkdir launch
cd urdf
gedit robot.urdf
-------------------
<?xml version="1.0"?>
<robot name="my_robot" xmlns:xacro="http://www.ros.org/wiki/xacro">
<link name="link_chassis">
<pose>0 0 0.1 0 0 0</pose>
<inertial>
<mass value="5"/>
<origin rpy="0 0 0" xyz="0 0 0.1"/>
<inertia>
</inertial>

<collision name="collision_chassis">
<geometry>
<box size="2 2 1">
</geometry>
</collision>

<visual>
<origin rpy="0 0 0" xyz="0 0 0">
<geometry>
<box size="2 2 1"/>
</geometry>
</visual>
</link>
</robot>
=================
cd launch
gedit spawn.launch
----------------------
<?xml version="0.1" encoding="UTF-8"?>
<launch>
<param name="robot_description" command="$(find xacro)/xacro --inorder '$(find my_robot_description)/urdf/robot.urdf'">
<arg name="x" default="0"/>
<arg name="y" default="0"/>
<arg name="z" default="1.5">
<node name="my_robot_spawn" pkg="gazebo_ros" type="spawn_model" outpu="screen"
args="-urdf -param robot_description -model my_robot -x $(arg x) -y $(arg y) -z $(arg z) "/>
</launch>
==============================================
cd simulation_ws
catkin_make
source devel/setup.bash
roslaunch my_robot_description spawn.launch
===============================
How to visualize a robot URDF using RVIZ
-----------------------------------------

gedit robot.urdf
-------------------
<?xml version="1.0"?>
<robot name="my_robot" xmlns:xacro="http://www.ros.org/wiki/xacro">
<link name="link_chassis">
<pose>0 0 0.1 0 0 0</pose>
<inertial>
<mass value="5"/>
<origin rpy="0 0 0" xyz="0 0 0.1"/>
<inertia ixx="0.0395416666667" ixy="0" ixz="0" iyy="0.1062083333" iyz="0" izz="0.1062083333"/>
</inertial>

<collision name="collision_chassis">
<geometry>
<box size="1 1 2">
</geometry>
</collision>

<visual>
<origin rpy="0 0 0" xyz="0 0 0">
<geometry>
<box size="1 1 2"/>
</geometry>
</visual>
</link>
</robot>
=================
roslaunch my_robot_description spawn.launch
cd launch
gedit rviz.launch
====================
<?xml version="1.0"?>
<launch>
<param name="robot_description" command="$(find xacro)/xacro --inorder '$(find my_robot_description)/urdf/robot.urdf'"/>

<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
<param name="use_gui" value="False"/>

</node>
<node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher"/>
<node name="rviz" pkg="rviz" type="rviz"/>
</launch>
----------------------------

roslaunch my_robot_description rviz.launch
----------------
In rviz Add 'Robotmodel'
Fixed FRame "link_chassis'
=======================
How to create a robot using URDF-part2-Joints
===============================================
robot.urdf
-------------------
<?xml version="1.0"?>
<robot name="my_robot" xmlns:xacro="http://www.ros.org/wiki/xacro">
<link name="link_chassis">
<pose>0 0 0.1 0 0 0</pose>
<inertial>
<mass value="5"/>
<origin rpy="0 0 0" xyz="0 0 0.1"/>
<inertia ixx="0.0395416666667" ixy="0" ixz="0" iyy="0.1062083333" iyz="0" izz="0.1062083333"/>
</inertial>

<collision name="collision_chassis">
<geometry>
<box size="1 1 2">
</geometry>
</collision>

<visual>
<origin rpy="0 0 0" xyz="0 0 0">
<geometry>
<box size="1 1 2"/>
</geometry>
</visual>
</link>

<joint name="joint1" type="continuous">
<origin xyz="0.6 0 0.8" rpy="0 0 0"/>
<parent link="link_chassis"/>
<child link="link_arm"/>
</joint>


<link name="link_arm">
<pose>0 0 0 0 0 0</pose>
<inertial>
<mass value="0.5"/>
<origin xyz="0 0 0" rpy="0 0 0"/>
<inertia ixx="0.039541" ixy="0" ixz="0" iyy="0.1062" iyz="0" izz="0.1062"/>

</inertial>
<collision name="collision_chassis">
<geometry>
<box size="0.2 0.2 1"/>
</geometry>
</collision>
<visual>
<origin xyz="0 0 0" rpy="0 0 0"/>
<geometry>
<box size="0.2 0.2 1">
</geometry>
</visual>
</link>
</robot>
=================
roslaunch my_robot_description rviz.launch
----------------
How to launch RViz using a configuration file
-==============================================
How to use joint state publisher
=============================================

